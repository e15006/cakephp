create datebece wp;
create database wp; 
 grant all on wp.* to wp@localhost identified by 'wp'; 
show processlist 
select user from mysql.user;
show processlist  select user from mysql.user;
select user from mysql.user; 
create user yukari identified by '1234'; 
select user from mysql.user; 
show database; 
show datebases;  
create database db1;
show databases; 
crant all on db1.* to yukari@localhost;
grant all on db1.* to yukari@localhost;v
;
grant all on db1.* to yukari@localhost; 
select user,host from mysql.user; 
drop user 'yukari'@'%';
select user,host from mysql.user; 
drop user 'yukari'@'%';
drop user 'yukari'@'localhost'; 
select user,host from mysql.user; 
select user,host from mysql.user; create user yukari identified by '1234';
grant all on db1.* to yukari@localhost 
;
grant all on db1.* to yukari@localhost;  
select user,host from mysql.user; 
drop user 'yukari'@'localhost'; 
drop user 'yukari'@'%';
select user,host from mysql.user; 
create user yukari o
create user yukari@localhost identified by '1234';
select user,host from mysql.user; 
show databeses;
show databases; 
grant all on db1.* to yukari@localhost;  
serect databeses();
serect databeses(); 
select databeses();  
select databases();  
select database();  
create table tb1(bang barchar(10),nama varchar(10),tosi int); 
create table tb1(bang varchar(10),nama varchar(10),tosi int); 
show tables; 
desc tb1; 
insert into db1 values('A101','佐藤')'
;
insert into db1 values('A101','佐藤'); 
select database();  
desc tb1; 
insert into db1 values('A101','佐藤','40';)
;
insert into tb1 values('A101','佐藤','40');
insert into tb1 values('A102','高橋','28');
insert into tb1 values('A103','中川','20');
insert into tb1 values('A104','渡辺','23');
insert into tb1 values('A105','西沢','35');
select * from tb1; 
create table tb1A select * from tb1; 
show tables; 
create table tb1B select * from tb1; 
create table tb1C select * from tb1; 
show tables; 
desc tb1; 
show tables; 
show databases;  
select databese(); 
select databese db1; 
select database db1;  
select database();   
desc tb1; 
select * from tb1; 
show tables; 
insert into tb1(nama) values('\"西沢\\\"');
select * from tb1; 
insert into tb1(nama) values('\"西沢\\"'); 
select * from tb1; 
insert into tb1(nama) values('\"西沢\\\"'); 
select * from tb1; 
create into hizuke (a date);
insert into hizuke (a) values('2013-11-5');
insert into hizuke (a) values('2015-11-5'); 
create table hizuke (a date); 
insert into hizuke (a) values('2015-11-5'); 
select * from tb1; 
select * from hizuke;  
insert into hizuke (a) values('0000-00-00'); 
insert into hizuke (a) values('2015-11-05'); 
select * from hizuke;  
prompt \c> 
prompt \c>; 
prompt \d> 
create table hizu_ziko (hizu datetaime); 
insert into hizu_ziko values ('2013-11-17 20:35:15');
insert into hizu_ziko values ('2013-11-17 20:35:15'); 
create table hizu_ziko (hizu datetime); 
insert into hizu_ziko values ('2013-11-17 20:35:15'); 
select * from hizu_ziko; 
insert into hizu_ziko values ('2015-11:05 19:22:00');  
select * from hizu_ziko; 
prompt \d:\h> 
drop procedure if exists tb1X;
delimiter //
create procedure tb1X(in x varchar(100))
begin
set @s = concat('drop table if exists `', x ,'`');
prepare stmt from @s;
execute stmt;
deallocate prepare stmt;
set @s = concat('create table `', x ,'` select * from tb1');
prepare stmt from @s;
execute stmt;
deallocate prepare stmt;
 
end
//
create procedure tb1X(in x varchar(100)) begin  set @s = concat('drop table if exists `', x ,'`'); prepare stmt from @s; execute stmt; deallocate prepare stmt;  set @s = concat('create table `', x ,'` select * from tb1'); prepare stmt from @s; execute stmt; deallocate prepare stmt;   end//
delimiter ; 
call tb1x('tb1D'); 
show tables; 
select * from tb1D; 
desc tb1C; 
alter table tb1C modify nama varchar(100); 
desc tb1C; 
alter table tb1C add umare datetime; 
desc tb1C; 
select * from tb1C;  
desc tb1C; 
select from * tb1C; 
select * from tb1C;  
insert into tb1C values('N111','松田','33','1980-11-10'); 
select * from tb1C;  
call tc1x('tb1D'); 
call tb1x('tb1D'); 
desk tb1D; 
desc tb1D; 
alter table tb1D add umare datetime first; 
deck tb1D; 
desc tb1D; 
call tb1x('tb1E'); 
desc tb1E;  
alter table tb1e add umare datetime after bang; 
alter table tb1E add umare datetime after bang; 
desc tb1E;  
alter table tb1C modify umare datetime first; 
desc tb1E;  
desc tb1C;  
alter table tb1C change umare seinen date;
desc tb1C;  
alter table tb1C drop seinen; 
desc tb1C;  
select * from tb1C; 
desc tb1C;  
insert into tb1C(bang) values('1234567890')
;
insert into tb1C(bang) values('1234567890');
insert into tb1C(bang) values('123456789011');
desc tb1C;  
select * from tb1C; 
create table itii(a int primary key,b varchar(10));
desc itii;  
insert into itii values(1,'あ');
insert into itii(1) values(1);
insert into itii(1) values(null);
insert into itii(1) values(2);
insert into itii(a) values(2);
select * from itii;
create table uniq(a int unique,b varchar(10));
desc uniq;
insert into uniq (a) values(null);
desc uniq;
insert into uniq (a) values(1);
desc uniq;
insert into uniq(a) values(null);
desc uniq;
create table renzoku (a int auto_increment primary key,b varchar(10));
desc renzoku;
insert into renzoku(b) values('子');
insert into renzoku(b) values('丑');
insert into renzoku(b) values('寅');
insert into renzoku(b) values('卯');
insert into renzoku(b) values('辰');
select * from renzoku; 
call tb1x('tb1G');
desc tb1G;
alter table tb1G modify nama varcher(10) default'氏名未入力';
alter table tb1G modify nama varcher(10) default '氏名未入力';
alter table tb1G modify nama varchar(10) default '氏名未入力';
desc tb1G;
insert into tb1G(bang,tosi) values ('N999',38);
desc tb1G;
select * from tb1G;
show index from tb1G;
create index my_ind on tb1G(bang);
show index from tb1G;
show index from tb1G \G 
drop index my_ind on tb1G;
show index from tb1G \G 
ls 
exit 
desc tb1;
alter table db1 modify bang varchar(10) primary key;
alter table tb1 modify bang varchar(10) primary key; 
serect * from tb1; 
select * from tb1; 
delet from tb1 where bang is null;
delete from tb1 where bang is null;
select * from tb1; 
alter table tb1 modify bang varchar(10) primary key; 
deck tb1;
desc tb1;
create table tb1h serect * from tb1; 
create table tb1h select * from tb1; 
desc tb1; 
create table tb1i like tb1; 
desc tb1; 
insert into tb1i select * from tb1; 
select * from tb1i; 
alter table tb1I drop primary key; 
alter table tb1i drop primary key; 
desc tb1i;
insert into tb1i (nama) select bang from tb1; 
desc tb1i;
select * from tb1i;  
drop table tb1i; 
select * from tb1i;  
drop table if exists tb1i; 
show table 
c
;
show table  c;
show table;
delete from tb1h;
select * from tb1h;
drop database db1; 
show databases;
create databece db1; 
create databese db1; 
create database db1; 
use db1; 
show tables; 
show databases; 
show tables; 
create table nakade (a varchar(10),);
create table nakade; 
insert into nakade select * from tb1; 
create table nakade; 
show tables; 
insert into nadake (a) select nama from tb1; 
select * from nadake; 
create table nadake (a); 
create table nadake (a, varchar(10)); 
create table nadake (a, varchar(10) ); 
create table nadake (a varchar(10)); 
select nadake;
desc nadake; 
insert into nadake (a) select nama from tb1; 
desc nadake; 
select * from nadake; 
alter table nadake modify nama 松尾;
insert into nadake (a) select nama from tb1; 
select * from nadake; 
source tb_make.txt;
select * from tb; 
select uria,bang,uria.bang,uria from tb;
select bang as 社員番号,uria as 売上 from tb;
select uria*10000 as 売上 from tb; 
select uria*10000 as 売上(円) from tb; 
select uria*10000 as " 売上(円)" from tb; 
select avg(uria) from rb;
select avg(uria) from tb;
select sum(uria) from tb;
select count(uria) from tb;
select pi();
select version;
select version();
select databases();
select database();
select user();
select charset();
select charset('この文字');
select concat(bang,nama,'さん') from tb1;
select right(bang,2) from tb1;
select * from tb1; 
select left(bang,2) from tb1;
select repeat ('.',tosi) from tb1;
select repeat ('.',tosi) 年齢グラフfrom tb1;
select repeat ('.',tosi) 年齢グラフ from tb1;
select reverse(nama) from tb1; 
create table ima(a int aoto_increment primary key, b datetime  )
create table ima(a int aoto_increment primary key, b datetime );
create table ima(a int aoto_increment primary key, b datetime  ) create table ima(a int aoto_increment primary key, b datetime );
create table ima(a int auto_increment primary key, b datetime); 
insert into ima (b) values(now());
select * from tb1; 
select * from ima; 
insert into ima (b) values(now());
select * from ima; 
select * from tb limit 3;
select *
;
select * from tb where uria>=100;
select * from tb where tuki>=5;
select * from tb where tuki==5;
select * from tb where tuki>==5;
select * from tb where tuk=5;
select * from tb where uria>=50;
select * from tb where uria<50;
select * from tb where tuki<>4;
select * from tb where uria between 50 and 100;
select * from tb where uria not between 50 and 200;
select * from tb where uria  tuki in (5,6);
select * from tb where uria tuki in (5,6);
select * from tb where tuki in (5,6);
select * from tb where uria  tuki in (5,6)exit
;
create database 11;
create database test;
show databases;
use db1;
select databese();
select database();
show table;
show tables;
desc tb1;
select * from tb1; 
select * from tb1; select * from tb1; 
use mysql; 
select * from tb where bang like '%1';
select * from tb;
select * from tb where bang like '%1';
select * from tb1;
insert into tb1 values(A106, '川中', 22);
select * from tb1 where nama like '%川';
insert into tb1 values(A106 , '山川海' , 22);
insert into tb1 values('A107' , '山川海' , 22);
select * from tb1;
select * from tb1 where nama like '%川';
select * from tb1 where nama like '%川%';
select * from tb1 where nama not like '%川%';
insert into tb1H select * from tb1; 
insert into tb1h select * from tb1; 
select * from tb1h;
insert into tb1h(nama) values("氏名のみ"); 
select * from tb1h;
select * from tb1h where tosi is null;
select * from tb1h where tosi is not null;
select desting bang from tb;
select destinct bang from tb;
select distinct bang from tb;
select * from tb where uria>=50 uria<=100; 
select * from tb where uria>=50 and uria<=100; 
select * from tb where uria<=50 or uria>=100; 
select * from tb where tuki in(5,6);
select * from tb where tuki=5 or tuki=6;
select * from tb where bang like '%A' and tuki=4 or uria=200;
select * from tb;
select * from tb where bang ='A101' and tuki=4 or uria > 200 and tuki =4;
select * from tb where bang ='A101' and tuki=4 or uria >= 200 and tuki =4;
select 
case
when uria>=100 then '多い';
select  case when uria>=100 then '多い';
select case when uria>=100 then '多い'
when uria>=50 then '中ぐらい'
else '少ない'
end
from tb; 
select case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end from tb;
select case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb;
select bang, tuki , case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb;
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb; 
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by bang,tuki;  
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by tuki,uria desc;  
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by tuki,uria desc limit 5;  
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by tuki,uria desc limit 2 offset 3;  
select bang, tuki, uria, case when uria>=100 then '多い' then uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by tuki, uria desc limit 2 offset 3;  
select bang, tuki , uria, case when uria>=100 then '多い' then uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by  uria desc limit 2 offset 3;  
select bang, tuki ,  uria ,case when uria>=100 then '多い' when uria>=50 then '中ぐらい' else '少ない' end 評価 from tb order by tuki,uria desc limit 2 offset 3;  
select bang,avg(uria) 個人平均, sum(uria) 個人平均
, count(uria) データ数 from tb group by bang;
select bang,avg(uria) 個人平均, sum(uria) 個人平均 , count(uria) データ数 from tb group by bang;
select  tuki,avg(uria) 月平均, sum(uria) 月平均 , count(uria) データ数 from tb group b tuki; 
select tuki,avg(uria) 月平均, sum(uria) 月平均 , count(uria) データ数 from tb group by tuki; 
select bang,avg(uria) 個人平均, sum(uria) 個人平均 , count(uria) データ数 from tb group by bang having sum(uria) >= 200;
select bang,avg(uria) 個人平均, sum(uria) 個人平均 , count(uria) データ数 from tb where tuki=4 group by bang;
select bang,avg(uria) 個人平均, sum(uria) 個人平均 , count(uria) データ数 from tb group by bang order by 個人合計 desc;
select bang,avg(uria) 個人平均, sum(uria) 個人平均 , count(uria) データ数 from tb group by bang order by 個人平均 desc;
alter table tb add bikou varthar(100);
alter table tb add bikou varchar(100);
desc tb;
select * from tb;
update tb set bikou='ガンバレ'
select * from tb;
update tb set bikou='優秀' where uria>=100;
select * from tb;
select * from tb oerder by uria limit 3;
update tb set bikou='ガンバレ' order by uria limit 3;
select * from tb oerder by uria;
select * from tb order by uria;
select * from tb order by uria limit 3;
update tb set bikou='普通' where bikou='特記なし';
select * from tb order by uria;
desc tb;
create table tb_A101 select * from tb
where bang = 'A101';
create table tb_A101 select * from tb where bang = 'A101';
select * from tb;
select * from tb_A101;
select * from tb order by uria desc; 
select * from tb order by uria desc limit 4 offset 1; 
create table tb_2to5
select * from tb order by uria desc limit 4 offset 2; 
create table tb_2to5 select * from tb order by uria desc limit 4 offset 2;
select * from tb_2to5;
create table tb_2to5 select * from tb order by uria desc limit 4 offset 1;
create table tb_2to5 select * from tb order by uria desc limit 4 offset 2;
create table tb_2to5 select * from tb order by uria desc limit 4 offset 1;
select * from tb_2to5;
create table tb1j select * from tb1;
create table tb1k select * from tb1;
desc tb1j;
desc tb1k;
show tables; 
delete from tb1j;
select * from tb1j;
select * from tb1k;
delete from tb1k where tosi<30;
select * from tb1k;
create table tb_copy select * from tb;
select * from tb_copy;
create table tb_copy select * from tbk;
select * from tb_copy order by uria desc;
delete from tb_copy order by uria desc limit 4; 
select * from tb_copy; 
select * from tb_copy order by uria desc; 
select database();
show tb1;
show tables;
desc tb1;
select * from tb1;
desc tb1;
select * from tb1;
select bang,avg(uria)
from tb
where uria>=50
group by bang
having avg(uria)>=120
ordr by avg(uria) desc;
select bang,avg(uria) from tb where uria>=50 group by bang having avg(uria)>=120 ordr by avg(uria) desc;
select bang, avg(uria) from tb where uria>=50 group by bang having avg(uria)>=120 order by avg(uria) desc;
create table tbk(
bang int auto_increment primary key,
nama varchar(100)
mess varchar(100));
create table tbk( bang int auto_increment primary key, nama varchar(100) mess varchar(100));
create table tbk( bang int auto_increment primary key, nama varchar(100) mess varchar(100))
create table tbk( bang int auto_increment primary key, nama varchar(100),  mess varchar(100));
create table tbk( bang int auto_increment primary key, nama varchar(100) mess varchar(100)) create table tbk( bang int auto_increment primary key, nama varchar(100),  mess varchar(100));
desc tbk;
create table tbk( bang int auto_increment primary key, nama varchar(100), mess varchar(100)); 
desc tbk;
insert into tbk(nama, mess) values(' test' , 'test');
desc tbk;
ls 
;
source tb2_make.txt;
source tb1_make.txt;
source tb3_make.txt;
source create_rbl_mysql.sql;
source create_tbl_mysql.sql;
select 8 from tb;
select * from tb;
select * from tb1;
select * from tb2;
select * from tb3;
exti
;
select * from tb2;
select * from tb3;
select * from tb;
select * from employees;
select * from departments;
select * from tb1 union select * from tb2;
select * from tb where bang='A102'
union
select * from tb where bang='A103'
union
select * from tb where bang='A104'
union 
select * from tb where bang="A107";
select * from tb where bang='A102' union select * from tb where bang='A103' union select * from tb where bang='A104' union  select * from tb where bang="A107";
select bang from tb where uria>=200 union select bang from tb1 where tosi >=35;
select * from tb join tb1 on tb.bang = tb1.bang;
select tb1.bang,nama uria from tb join tb1 on tb.bang = tb1.bang;
select * from employees;
select * from departments;
select employees.deptno,empno ename dname from employess joindepartments on employees.deptno = departments.depyno;
select departments.deptno,empno ename dname from employess joindepartments on employees.deptno = departments.depyno;
select empno, ename, employees.deptno from employess joindepartments on employees.deptno = departments.depyno;
select empno, ename, employees.deptno  dname from employess joindepartments on employees.deptno = departments.depyno;
select empno, ename, employees.deptno, dname from employess join departments on employees.deptno = departments.depyno;
select empno, ename, employees.deptno, dname from employees join departments on employees.deptno = departments.depyno;
select empno, ename, employees.deptno, dname from employees join departments on employees.deptno = departments.deptno;
select empno, ename, deptno, dname from employees join departments using(deptno) by empno;
select empno, ename, deptno, dname from employees join departments using(deptno) order by empno;
select empno, ename, deptno, dname from employees join departments using(deptno) where uria > 100;
select bang 社員番号, nama 名前,
uria 売上, from tb join tb1 using(bang) where uria > 100;
select bang 社員番号, nama 名前, uria 売上, from tb join tb1 using(bang) where uria > 100;
select empno　番号, ename　氏名, deptno　部内番号, dname　部内名, from employees join departments using(deptno) by empno where deptno > 20;
select empno 番号, ename 氏名, deptno 部内番号, dname 部内名, from employees join departments using(deptno) by empno where deptno > 20;
select empno 番号, ename 氏名, deptno 部内番号, dname 部内名, from employees join departments using(deptno) order by empno where deptno > 20;
select empno 番号, ename 氏名, deptno 部内番号, dname 部内名, from employees join departments using(deptno) where dname = '管理' order by empno;
select empno 番号, ename 氏名, deptno 部内番号, dname 部内名, from employees join departments using(deptno) where dname = '管理' order by empno; 
select empno 番号, ename 氏名, deptno 部門番号, dname 氏名, from employees join departments where dname = '管理' order by empno; 
select empno 番号, ename 氏名, deptno 部門番号, dname 部門名, from employees natural join departments where dname = '管理' order by empno;
select tb.bang, uria, nama, ken 
from tb join tb1 on tb.bang = tb1.bang join tb3 on tb.bang = tb3.bang;
select tb.bang, uria, nama, ken  from tb join tb1 on tb.bang = tb1.bang join tb3 on tb.bang = tb3.bang;
desc orders; 
desc ord_details; 
desc customers; 
desc products;
select ordno, pname, quantity, cname
from orders join ord_details using(ordno)
join customers using(custno) join products using(prdno);
select ordno, pname, quantity, cname from orders join ord_details using(ordno) join customers using(custno) join products using(prdno);
select ordno, pname, quantity, cname from orders join ord_details using(ordno) join customers using(custno) join products using(prodno);
select * from tb1 order by bang;
select bang, uria, nama from tb natural join order by bang;
select bang, uria, nama from tb natural join tb1 order by bang;
select bang, uria, nama from tb join using(bang) tb1 ) order by bang;
select bang, uria, nama from tb join tb1 using(bang) order by bang;
select bang, uria, nama from tb  left outer join tb1 using(bang) order by bang;
select bang, uria, nama from tb  right outer join tb1 using(bang) order by bang;
select bang, uria, nama from tb  right outer join tb1 using(bang) union select bang, nama, uria from tb lrft outer join tb1 using(bang) order by bang;
select bang, uria, nama from tb  right outer join tb1 using(bang) union select bang, nama, uria from tb left outer join tb1 using(bang) order by bang;
insert into employees(empno, ename) values(1015, '山内');
select * from employees;
select * from departments;
select empno, ename, deptno, dname from employees join departments using(deptno); 
select empno, ename, deptno, dname from employees right outer join from departments union select empno, ename, deptno, dname from departments left outer join from employees using(deptno); 
select empno, ename, deptno, dname from employees right outer join departments using(deptno) union select empno, ename, deptno, dname from departments left outer join employees using(deptno); 
select empno, ename, deptno, dname from employees left outer join departments using(deptno) union select empno, ename, deptno, dname from departments right outer join employees using(deptno); 
select empno, ename, deptno, dname from employees left outer join departments using(deptno) union select empno, ename, deptno, dname from departments right outer join employees using(deptno) order by empno; 
select e.empno 番号, e.ename 氏名, m.empno 上司番号, m.ename 上司名, from employees e join employees m on e.mgr = m.empno order by e.empno;
select e.empno 番号, e.ename 氏名, m.empno 上司番号, m.ename 上司名, from employees e left outer join employees m on e.mgr = m.empno order by e.empno;
select * from employees as e;
select e.empno 番号, e.ename 氏名, m.empno 上司番号, m.ename 上司名, from employees e left outer join employees m on e.mgr = m.empno order by e.empno;
select e.empno 番号, e.ename 氏名, m.empno 上司番号, m.ename 上司名, from employees as e left outer join employees as m on e.mgr = m.empno order by e.empno;
select * from tb1 as a join tb1 as b;
select a.nama,a.tosi,count(*)
from tb1 as a
join tb1 as b 
where a tosi<=b.tosi
group by a.bang;
select a.nama,a.tosi,count(*) from tb1 as a join tb1 as b  where a tosi<=b.tosi group by a.bang;
select a.nama,a.tosi,count(*) from tb1 as a join tb1 as b where a tosi<=b.tosi group by a.bang;
select a.nama,a.tosi,count(*) from tb1 as a join tb1 as b where a.tosi<=b.tosi group by a.bang;
select * from tb;
select * from tb where uria= (select max(uria) from tb);
select * from tb where uria= (select min(uria) from tb);
select * from tb where uria= (select avg(uria) from tb);
select * from tb where uria= (select avg(uria) from tb1);
select * from tb where uria= (select avg(uria) from tb);
select * from tb where uria>= (select avg(uria) from tb);
select * from tb where uria>= (select avg(nama) from tb);
select * from tb where uria>= (select avg(nama) from tb1);
select * from tb join select * from tb1 select where uria>= (select avg(nama)from tb);
select nama from tb natural join tb1 where uria>= (select avg(uria)from tb);
select * from tb1 where tosi >= (select avg(tosi) from tb1);
select * from tb1 where tosi >=28(nama) from tb1
;
select nama from tb1 where tosi >=28(tosi) from tb1;
select nama from tb1 where tosi >= (tosi,28) from tb1;
select nama from tb1 where tosi>=28;
select nama from tb1 where tosi >= (select nama from A10i) from tb1;
select nama from tb1 where tosi >= (select nama from  tb1 A102) from tb1;
select nama from tb1 where tosi >= (select tosi from tb1 where nama='高橋';
select * from tb1 where tosi >= (select tosi from tb1 where nama='高橋';
select * from tb1 where tosi >= (select tosi from tb1 where nama='高橋');
select nama from tb1 where bang =
(select bang from tb where uria >=200);
select nama from tb1 where bang = (select bang from tb where uria >=200);
select nama from tb1 where bang in (select bang from tb where uria >=200);
select nama from tb1 where bang in (select bang from tb where uria <=200);
select * from tb;
select nama from tb1 where bang = (select sum(uria) from tb );
select nama from tb1 where bang in (select sum(uria) from tb );
select nama from tb1 where tb in (select sum(uria) from tb );
select nama from tb1 where bang in(select sum(uria) from tb );
select * from tb1;
select * from tb;
select * from tb order by tb;
select * from tb order by bang;
select * from tb1 exist (select * from tb where tb.bang = tb1.bang);
select * from tb1  exist (select * from tb where tb.bang = tb1.bang);
select * from tb1 where exists (select * from tb where tb.bang = tb1.bang);
select * from tb1 where  not exists (select * from tb where tb.bang = tb1.bang);
create table tb_zyun like tb;
select * from tb_zyun;
desc tb_zyun;
alter table tb_zyun add zyun int auto_increment primary key;
desc tb_zyun;
insert into tb_zyun (bang,uria,tuki) (select bang,uria,tuki from tb order by uria desc);
desc tb_zyun;
select * from tb_zyun;
select a.bang,a.uria, from tb a join tb b where a.uria>=b.uria grop by a.uria;
select a.bang, a.uria, from tb a join tb b where a.uria >= b.uria group by a.uria;
select a.bang,a.uria count(*)
from tb as a join tb as b where a.uria<=b.uria group by a.uria;
select a.bang,a.uria count(*) from tb as a join tb as b where a.uria<=b.uria group by a.uria;
select a.bang, a.uria count(*) from tb as a join tb as b where a.uria>=b.uria group by a.uria;
select * from tb where exists (select * from tb1 where tb.bang = tb1.bang);
create table tb1L select * from tb1;
select * from tb1L;
select nama, tosi from tb1L;
create view v1 as select nama, tosi from tb1L; 
select nama, tosi from v1;
update v1 set nama='主任・佐藤' where nama='佐藤';
select nama, tosi from v1;
select from * tb1L;
select * from tb1L;
create view v2
as
select tb.bang,tb1L.nama,tb.uria
from tb1L using(bang)
where tb.uria>=100;
create view v2 as select tb.bang,tb1L.nama,tb.uria from tb1L using(bang) where tb.uria>=100;
create view v2 as select bang, nama, uria from tb join tb1L using(bang) where uria >= 100;
select * from v2;
update tb set uria=777 where uria=54
select * from v2;
update tb set uria=54 where uria=777;
select * from v2
select tb1""
'';
select tb1"" '';
select employees from departments.deptno 
select employees from departments.deptno ;
select employees from departments.deptno  select employees from departments.deptno;
yes
select deptno from employees join departments;
yes select deptno from employees join departments;
 select deptno from employees join departments on employees.deptno=departments.deptno;
 select employees.deptno, from employees join departments on employees.deptno=departments.deptno;
 select employees.deptno, employees.dname,employees.sal from employees join departments on employees.deptno=departments.deptno; 
 select employees.deptno, employees.ename, employees.sal from employees join departments on employees.deptno=departments.deptno; 
create view v_e_d select employees.deptno, employees.ename, employees.sal from employees join departments on employees.deptno=departments.deptno; 
create view v_e_d select deptno, ename, dname, sal from employees natural join departments where sal >= 300000;
 select deptno, ename, dname, sal from employees natural join departments where sal >= 300000;
create or view v_e_d as select deptno, dname, ename, sal from employees natural join departments where sal >= 300000;
create or replace view v_e_d as select deptno, dname, ename, sal from employees natural join departments where sal >= 300000; 
select * from departments;
select * from emplyeers; 
select * from employeers; 
select * from v_e_d; 
show tables like 'v%';
desc v2;
show create view v_e_d\G
insert into v1 values ('アルバイト・石田' 18 );
insert into v1 values ('アルバイト・石田', 18 );
select * from v1; 
select * from tb1L; 
select * from v2; 
create view v3 as select bang,uria from tb where uria>=100;
select * from v3; 
insert into v3 values('意地悪',50);
select * from v3; 
select * from tb; 
select bang,uria from tb; 
create or replace view v3 as select bang,uria from tb where uria>=100 with check option;
select bang,uria from tb; 
insert into v3 values('意地悪',50);
create or replace view v1
as select now();
create or replace view v1 as select now();
alter view v1 as select nama,tosi from tb1;
create or replace view v1
;
select * from v1; 
show tables like 'v1%';
drop view v1;
insert into v_e_d values('comm',null);
insert into v_e_d values('comm',);
insert into v_e_d comm('null');
create or replace view v_e_d as select deptno, dname, ename, sal, comm from employees natural join departments where sal >= 300000; 
select * from v_e_d; 
insert into v_e_d comm ('null');
insert into v_e_d comm ('');
insert into v_e_d comm (' ');
create or replace view v_e_d as select deptno, dname, ename, sal, comm from employees natural join departments where sal >= 300000; 
insert into v_e_d comm (' ');
create or replace view v_e_d as select deptno, dname, ename, sal, comm from employees natural join departments where sal >= 300000; 
select * from v_e_d; 
select ename, sal, grade
from employees join salgrades on sal between losal and hisal;
select ename, sal, grade from employees join salgrades on sal between losal and hisal;
create or replace view v_e_d as select deptno, dname, ename, sal, comm from employees natural join departments where sal >= 300000 and comm is null;  
select * from v_e_d; 
select bang, avg(uria)
from tb 
where uria >= 50
group by bang
having avg(uria) >= 120
order by avg(uria) desc;
select bang, avg(uria) from tb  where uria >= 50 group by bang having avg(uria) >= 120 order by avg(uria) desc;
create view v_uria as select bang, avg(uria) from tb  where uria >= 50 group by bang having avg(uria) >= 120 order by avg(uria) desc;
select * from v_uria; 
delimiter //
select * from tb; 
//
delimiter //
create procedure pr1()
begin 
select * from tb;
seleco * from tb1;
end 
//
create procedure pr1() begin  select * from tb; seleco * from tb1; end//
create procedure pr1() begin select * from tb; seleco * from tb1; end//
create procedure pr1() begin select * from tb; select * from tb1; end//
delimiter;
;
delimiter ;
;
l
Q
delimiter ; 
call pri1;
call pr1;
delimiter // 
create procedure pr2(d int)
begin
select * from tb where uria >= d;
end
//
create procedure pr2(d int) begin select * from tb where uria >= d; end//
delimiter // 
delimiter ;
call pr2(100);
call pr(300);
call pr2(300);
delimiter // 
create procedure pr_e_d()
begin
select sal from employees;  
select sal from departments;  
end
//
create procedure pr_e_d() begin select sal from employees;   select sal from departments;   end//
call pr_e_d;
//
delmiter ; 
//
delimiter ;  
call pr_e_d;
call pr_e_d; 
call pr_e_d;  
// 
;
delimiter // 
create procedure pr_e_d(s int) begin select deptono, sal, dname, enama, comm from employees natural join departments wheresal >= s and comm is null;end
//
create procedure pr_e_d(s int) begin select deptno, sal, dname, ename, comm from employees natural join departments where sal >= s and comm is null; end // 
create procedure pr_e_d(s int)begin select deptno, sal, dname, ename, comm from employees natural join departments where sal >= s and comm is null; end 
//
drop procedure pr_e_d//
create procedure pr_e_d(s int) begin select deptno, sal, dname, ename, comm from employees natural join departments where sal >= s and comm is null; end//  
delimiter ;  
call pr_e_d; 
call pr_e_d(30000); 
delimiter // 
create procedure pri1()
begin
select * from tb;
select * from tb1;
end 
// 
create procedure pri1() begin select * from tb; select * from tb1; end//
delimiter ; 
call pr1; 
delimiter // 
create procedure pr2(d int)
begin
select * from tb where uria>=d;
end
//
create procedure pr2(d int) begin select * from tb where uria>=d; end//
create procedure pr2(d int) begin select * from tb where uria>=d; end// 
drop procedure pr2// 
create procedure pr2(d int) begin select * from tb where uria>=d; end// 
delimiter ; 
call pr2; 
pr2(200)
call pr2(100); 
pr2(200) call pr2(100);
pr2(200) call pr2(200);
delimiter // 
create procedure pr2(d int) begin select * from tb where uria>=d; end//  
drop procedure pr2// 
create procedure pr_e_d(s int) begin select deptno, dname,ename,sal from tb where uria>=d; end//  
delimiter ; 
call pr2(100); 
drop procedure pr1;  
show procedure pr1; 
show procedure status \G; 
call procedure pr_e_d(200000);
drop procedure pr_e_d;  
delimiter // 
delimiter ; 
delimiter // 
create function fu1(sintyo int) returns double 
begin
return sintyo * sintyo * 22 / 10000;
end// 
create function fu1(sintyo int) returns double  begin return sintyo * sintyo * 22 / 10000; end//
delimiter ; 
select fu1(161);
begin
select fu1(161);
create function fu2() return double begin select fu1(161);
delimiter // 
create function fu2() return double begin
declare r double;
select avg(uria) into r from tb;
return r;
end
//
create function fu2() return double begin declare r double; select avg(uria) into r from tb; return r; end//
create function fu2() return double begin declare r double; select avg(uria) into r from tb; return r; end// 
create function fu2() returns double
begin
declare r double;
select avg(uria) into r from tb;
return r;
end// 
create function fu2() returns double begin declare r double; select avg(uria) into r from tb; return r; end//
delimiter ; 
select fu2(); 
show function status 
; 
show create function fu2\G;
show create function fu2\G; 
show create function fu2\G 
drop fu2; 
drop function fu2;  
show create function fu2\G 
create table tb1M like tb1; 
desc tb1M; 
selec * from tb1M; 
select * from tb1M; 
demliter // 
;
delimiter // 
create trigger tr1 before delete on tb1 for each row
begin
insert into tb1M values(old.bang,old.nama,old.tosi);
end
// 
create trigger tr1 before delete on tb1 for each row begin insert into tb1M values(old.bang,old.nama,old.tosi); end//
delimiter ; 
delete from tb1 where bang in('A104', 'A105');
select * from tb1; 
select * from tb1M; 
create table dept_i
like departments; 
create table dept_i like departments;
desc dept_i;
delimiter // 
create trigger tr_dept_i after insert on departments for each row
begin
insert into dept_i values(new.bang);
end
// 
create trigger tr_dept_i after insert on departments for each row begin insert into dept_i values(new.bang); end//
create trigger tr_dept_i after insert on departments for each row begin insert into dept_i values(new.dname); end// 
insert into departments values(new.dname)// 
insert into departments values(dname)//  
delimiter ; 
select * from departments; 
insert into departments values(deptno,15);   
delimiter // 
create trigger tr_dept_i after insert on departments for each row begin insert into dept_i values(new.dname, new.deptno, new.loc); end//  
delimiter ; 
insert into departments values(50, '営業',’沖縄5);   
insert into departments values(50, '営業',’沖縄');   
;
insert into departments values(50, '営業',’沖縄');
insert into departments values(50, '営業',’沖縄');   
;
insert into departments values(50, '営業',’沖縄');
insert into departments values(50, '営業',’沖縄');   
;
insert into departments values(50, '営業',’沖縄');
insert into departments values(50, '営業',’沖縄'); 
insert into departments values(50, '営業',’沖縄')// 
;
insert into departments values(50, '営業',’沖縄'); 
insert into departments values(50, '営業',’沖縄')//;
insert into departments values(50,　'営業'); 
drop trigger tr_dept_i; 
delimiter // 
create trigger tr_dept_i after insert on departments for each row begin insert into dept_i values(new.dname, new.deptno, new.loc); end//  
delimiter ; 
insert into departments values(50, '営業', '沖縄'); 
select * from departments; 
select * from dept_i; 
delimiter // 
create trigger tr_dept_d dalete on departments for each row
begin
delete from dept_i where deptno = old.deptno;
end// 
create trigger tr_dept_d dalete on departments for each row begin delete from dept_i where deptno = old.deptno; end//
create trigger tr_dept_d before dalete on departments for each row begin delete from dept_i where deptno = old.deptno; end// 
create trigger tr_dept_d before delete on departments for each row begin delete from dept_i where deptno = old.deptno; end// 
delimiter ; 
select * from departments;
select * from dept_i; 
delete from departments where depono; 
delete from departments where deptno = old.deptno
delete from departments where deptno = 50; 
delete from departments where deptno = old.deptno delete from departments where deptno = 50;
delete from departments where deptno = old.deptno; 
delete from departments where deptno = old.deptno(50);  
select * from dept_i; 
select * from departments;
show trigger; 
show triggers;  
drop trigger tr_depo_d; 
drop trigger tr_dept_d; 
select * from tr_dept_d;
delimiter // 
create function f_uria(t int) returns int
begin
declare u int;
select sum(uria) into u from tb where tuki=t;
return u;
end// 
create function f_uria(t int) returns int begin declare u int; select sum(uria) into u from tb where tuki=t; return u; end//
delimiter ; 
select f_uria(4);
select f_uria(5);
select f_uria(6);
select f_uria(7);
show create table tb; 
create table tb1A like tb1; 
create table tb1A like tb ; 
create table tb1a like tb;  
show create tb1a\G
alter table tb1a rngine=MyISAM; 
alter table tb1a engine=MyISAM;
show create table tb1a; 
start transaction; 
delete from tb; 
delect * from tb; 
rollback; 
delect * from tb; 
select * from tb; 
set autocommit=0;
select @@autocommit; 
insert into tb values('test',555,555);
insert into tb values('test', 555, 555); 
select * from tb; 
set autocommit=1; 
select * from tb; 
select @@autocommit; 
create table tran(a int);
select tran; 
select * from tran; 
desc tran; 
insert into tran values(100);
commit; 
select * from tran; 
rollback;
select * from tran; 
rollback;
select * from tran; 
set autocommit=0; 
start transaction;
update tran set a = 777 where a = 100; 
select * from tran; 
update tran set a = 777 where a = 100; 
select * from tran; 
set autocommit=1;  
create table tbj0(
guru int auto_increment primary key,
sure varchar(30),
niti datetime,
aipi varchar(10));
create table tbj0( guru int auto_increment primary key, sure varchar(30), niti datetime, aipi varchar(10));
desc tbj0
;
alter table  change tbj0 aipi aipi  
;
alter table  change tbj0 aipi aipi varchar(20); 
alter table tbj0 change aipi aipi varchar(20); 
desc tbj0 
;
create table tbj1(
bang int auto increment primary key,
nama varchar(30),
mess text,
niti datetime,
guru int,
aipi varchar(20));
create table tbj1( bang int auto increment primary key, nama varchar(30), mess text, niti datetime, guru int, aipi varchar(20));
create table tbj1( bang int auto_increment primary key, nama varchar(30), mess text, niti datetime, guru int, aipi varchar(20));
desc tbj1 
;
select * into outfile 'data/out.csv fields terminated by ',' from tb1; 
;
select * into outfile '/home/yukari/table.utf8/data/out.csv' fields terminated by ',' from tb1; 
mysql -u yukari -p db1;
mysql -u root -p
;
load data infile 'C:/data/t.csv' into table tb1n fields terminated by ','; 
select * into outfile '/home/yukari/table.utf8/data/out.csv' fields terminated by ',' from tb1; 
select * into outfile '/home/yukari/table.utf8/data/out.csv' fields terminated by ',' from tb1;
use db1; 
select * into outfile '/home/yukari/table.utf8/data/out.csv' fields terminated by ',' from tb1;
create table tb1N like tb1; 
use db1; 
create table tb1N like tb1;  
load data infile 'C:/data/t.csv' into table tb1N fields terminated by ','; 
load data infile 'C:/data/t.csv' into table tb1N fields terminated by ',';
use db1; 
load data infile 'C:/data/t.csv' into table tb1N fields terminated by ',';
load data infile '/home/yukari/table.utf8/data/t.csv' into table tb1N fields terminated by ',';
select * from tb1N; 
source sql.txt
tee log3.txt
use db1;
select * from tb1;
use tb1;
select * from tb;
notee
use db1
select * from tb;
select * from tb1;
notee
show databases;
create database db2;
show databases;
grant all on db2.* to yukari;
use db2;
show databese;
show databeses;
show databases;
show table;
show tables;
show databases;
create database restaurant;
grant all on restaurant.* to yukari@localhost;
show tables
;
desc dishes;
select * from dishes;
insert into dishes(dish_name, price, is_spicy) values('カツカレー', 5, 0);
insert into dishes(dish_name, price, is_spicy) values('エビチリ', 5, 0);
select * from dishes;
insert into dishes(dish_name, price, is_spicy) values('高級料理', 20, 0);
insert into dishes(dish_name, price, is_spicy) values('高級料理', 30, 0);
insert into dishes(dish_name, price, is_spicy) values('高級料理', 40, 0);
select * from dishes;
delete from deshes where dish_id = 8;
delete from dishes where dish_id = 8;
delete from dishes where dish_id = 10;
select * from dishes;
cd
;
create table users(
username varchar(50),
password varchar(50));
create table users( username varchar(50), password varchar(50));
desc users; 
insert into users values('alice', '$1$23456789$owjaLbg5P5H4PuHzPKfH5/');
insert into users values('bob', '$1$23456789$Pq9xU8CbBS2GakQyahBWy1');
insert into users values('charlie', '$1$23456789$cTOFwRhCo1HBNu3b72W5p/');
select * from users; 
select dish_name, price 
select dishes;
select * from  dishes;
select * from  dishes; 
select * from  dishes;
charset utf8mb4
create database ppdb character set utf8mb4;
grate all on ppdb.* to 'yukari'@'localhost' identified by 'yukari1';
grate all on ppdb.* to 'yukari'@'localhost' identified by 'yukari';
grate all on ppdb.* to 'yukari'@'localhost' identified by 'yukari'; 
grant all on ppdb.* 'yukari'@'localhost' identified by 'yukari';
grant all on ppdb.* 'ppadmin'@'localhost' identified by 'yukari';
grant all on ppdb.* to 'ppadmin'@'localhost' identified by 'yukari';
grant select on ppdb.* to 'ppguest'@'localhost' identified by 'yukari';
CREATE TABLE zipcodes (
jiscode  VARCHAR(8),
zipcode  VARCHAR(8),
pref     VARCHAR(128),
city     VARCHAR(128),
town     VARCHAR(128),
townkana VARCHAR(128)
);
CREATE TABLE zipcodes ( jiscode  VARCHAR(8), zipcode  VARCHAR(8), pref     VARCHAR(128), city     VARCHAR(128), town     VARCHAR(128), townkana VARCHAR(128) );
desc zipcodes
;
show tables;
select * from zipcode;
desc zipcode; 
show tables;
select * from ppdb;
desc ppdb; 
show tables;
select count(*) from zipcode;
LOAD DATA INFILE "/homeyukari/KEN_ALL_CSV" INTO TABLE zipcode
FIELDS TERMINATED BY ','
ENCLOSED BY ','
;
LOAD DATA INFILE "/homeyukari/KEN_ALL_CSV" INTO TABLE zipcode FIELDS TERMINATED BY ',' ENCLOSED BY ',';
LOAD DATA INFILE "/homeyukari/KEN_ALL_CSV" INTO TABLE zipcode FIELDS TERMINATED BY ',' ENCLOSED BY '"'
LINES TERMINATED BY '/n'
(jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
LOAD DATA INFILE "/homeyukari/KEN_ALL_CSV" INTO TABLE zipcode FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
LOAD DATA INFILE "/home/yukari/KEN_ALL_CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
LOAD DATA INFILE "/home/ppuser/KEN_ALL_CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
LOAD DATA INFILE "/home/yukari/KEN_ALL_CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
use ppdb;
LOAD DATA INFILE "/home/yukari/KEN_ALL_CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
LOAD DATA INFILE "/home/yukari/KEN_ALL.CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
use ppdb;
LOAD DATA INFILE "/home/yukari/KEN_ALL.CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '/n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
select count(*) from zipcodes;
select * from zipcodes;
delete from zipcodes;
LOAD DATA INFILE "/home/yukari/KEN_ALL.CSV" INTO TABLE zipcodes FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n' (jiscode, @dmy, zipcode, @dmy, @dmy, townkana, pref, city, town, @dmy, @dmy, @dmy, @dmy, @dmy, @dmy);
select count(*) from zipcodes;
use ppdb;
INSERT INTO users VALUES(0, 'ppuser', 'ea31b37bdc58670b40f7929527028416a2d42dc07c502b316b303f4af2259a05');
select * from users; 
ls
;
CREATE TABLE feelings (
id          INT UNSIGNED NOT NULL AUTO_INCREMENT,
name        VARCHAR(50) NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE feelings ( id          INT UNSIGNED NOT NULL AUTO_INCREMENT, name        VARCHAR(50) NOT NULL, PRIMARY KEY (id) );
CREATE TABLE artists (
id          INT UNSIGNED NOT NULL AUTO_INCREMENT,
name        VARCHAR(90) NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE artists ( id          INT UNSIGNED NOT NULL AUTO_INCREMENT, name        VARCHAR(90) NOT NULL, PRIMARY KEY (id) );
CREATE TABLE tunes (
id          INT UNSIGNED NOT NULL AUTO_INCREMENT,
name        VARCHAR(90) NOT NULL,
artist_id   INT UNSIGNED NOT NULL,
feeling_id  INT UNSIGNED NOT NULL,
comcont     TEXT,
modified    DATETIME,
PRIMARY KEY (id)
);
CREATE TABLE tunes ( id          INT UNSIGNED NOT NULL AUTO_INCREMENT, name        VARCHAR(90) NOT NULL, artist_id   INT UNSIGNED NOT NULL, feeling_id  INT UNSIGNED NOT NULL, comcont     TEXT, modified    DATETIME, PRIMARY KEY (id) );
INSERT INTO feelings VALUES(NULL, 'ルンルン');
INSERT INTO feelings VALUES(NULL, 'ノリノリ');
INSERT INTO feelings VALUES(NULL, 'ホノボノ');
INSERT INTO feelings VALUES(NULL, 'ラブラブ');
INSERT INTO feelings VALUES(NULL, 'ヘロヘロ');
INSERT INTO feelings VALUES(NULL, 'ガックリ');
INSERT INTO artists VALUES(NULL, 'ソフトズ');
INSERT INTO artists VALUES(NULL, '丸見栄子');
INSERT INTO artists VALUES(NULL, 'コナチーズ');
INSERT INTO artists VALUES(NULL, '上部安埔里');
INSERT INTO artists VALUES(NULL, '森見タマエ');
INSERT INTO artists VALUES(NULL, 'ピーエッチピー');
INSERT INTO tunes VALUES(NULL, '春だよね', 1, 1, '春が来ると聴きたくなる曲です', NOW());
INSERT INTO tunes VALUES(NULL, '夏だよね', 1, 2, '夏が来ると聴きたくなる曲です', NOW());
INSERT INTO tunes VALUES(NULL, '秋だよね', 2, 3, '秋が来ると聴きたくなる曲です', NOW());
INSERT INTO tunes VALUES(NULL, '冬だよね', 2, 4, 'また冬がやって来ました', NOW());
INSERT INTO tunes VALUES(NULL, '朝が来た', 3, 5, '朝が来ると聴きたくなります', NOW());
INSERT INTO tunes VALUES(NULL, '昼だよ', 3, 6, '昼になると聴きたくなります', NOW());
INSERT INTO tunes VALUES(NULL, 'もう夜', 4, 1, 'これを聴くと眠くなります', NOW());
INSERT INTO tunes VALUES(NULL, 'あけがた', 4, 2, '', NOW());
INSERT INTO tunes VALUES(NULL, '楽しいな', 5, 3, '楽しいときに聴きたい曲です', NOW());
INSERT INTO tunes VALUES(NULL, 'うれしいな', 5, 4, 'これを聴くとうれしくなります', NOW());
INSERT INTO tunes VALUES(NULL, '迷っちゃう', 6, 5, 'もう迷いたくないです', NOW());
INSERT INTO tunes VALUES(NULL, 'もう食べられない', 6, 6, '満腹状態になると聴きたくなります', NOW());
select * from ppdb 
;
use ppdb 
;
select * from ppdb exit
;
show DATBASES
;
c
;
create table persons ( 
id integer primary key auto_increment,
name text not null,
mail text
);
create table persons (  id integer primary key auto_increment, name text not null, mail text );
show table; 
show tables; 
show databases;
show tables;
select * from persons;
alter table persons age int(11);
alter table persons add age integer;
desc persons; 
CREATE TABLE `persons` (
    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,
    `name`    TEXT NOT NULL,
    `age`    INTEGER,
    `mail`    TEXT
;
CREATE TABLE `persons` (     `id`    INTEGER PRIMARY KEY AUTOINCREMENT,     `name`    TEXT NOT NULL,     `age`    INTEGER,     `mail`    TEXT;
CREATE TABLE `persons` (
`id`    INTEGER PRIMARY KEY auto_increment,
'menber' TEXT NOT NULL,
'messege' INTEGER,
);
CREATE TABLE `persons` ( `id`    INTEGER PRIMARY KEY auto_increment, 'menber' TEXT NOT NULL, 'messege' INTEGER, );
CREATE TABLE `persons` ( `id`    INTEGER PRIMARY KEY auto_increment, 'menbers' TEXT NOT NULL, 'massege' INTEGER, ); 
use ppdb 
CREATE TABLE `persons` (
'menbers' INTEGER PRIMARY KEY auto_increment,
;
CREATE TABLE `persons` ( 'menbers' INTEGER PRIMARY KEY auto_increment,;
CREATE TABLE `persons` ( 
`id`    INTEGER PRIMARY KEY AUTO_INCREMENT,
'menber' TEXT NOT NULL,
'mase'
;
CREATE TABLE `persons` (  `id`    INTEGER PRIMARY KEY AUTO_INCREMENT, 'menber' TEXT NOT NULL, 'mase';
CREATE TABLE `persons` (  `id` INTEGER PRIMARY KEY AUTO_INCREMENT, 'menber' TEXT, 'massege' TEXT,);
use ppdb 
CREATE TABLE `persons` (
    `id`    INTEGER PRIMARY KEY AUTO_INCREMENT,
`massege`    TEXT NOT NULL,
`menber`    INTEGER
);
CREATE TABLE `persons` (     `id`    INTEGER PRIMARY KEY AUTO_INCREMENT, `massege`    TEXT NOT NULL, `menber`    INTEGER );
CREATE TABLE `menbers` (     `id`    INTEGER PRIMARY KEY AUTO_INCREMENT, `massege`    TEXT NOT NULL, `menber`    INTEGER );
show tables; 
Desc menbers; 
use menber
use menbers;
use ppdb 
alter table menbers add massege これはテストです ;
alter table menbers add massege (これはテストです);
show tables; 
alter table menbers change menbers Menbers; 
alter table menbers rename members; 
show menbers;
CREATE TABLE `messeges` (     `id`    INTEGER PRIMARY KEY AUTO_INCREMENT, `massege`    TEXT NOT NULL, `menber`    INTEGER );
show tables;
show table;
show tables; 
alter table messeges rename messages; 
show tables; 
alter table members change id int not null primary key auto-increment;
alter table members change id id int not null auto-increment;
alter table members change id id int not null autoincrement;
desc members; 
alter table members change messege name;
alter table members rename messege to name;
use ppdb ;
alter table members rename messege to name;
alter table members rename messege to mail;
alter table members change messege nama int;
use ppdb 
drop table members;
drop table messages;
show table;
show tables;
CREATE TABLE `members` (
    `id`    INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
name`    TEXT NOT NULL,
;
Q
;;
;;;
;
CREATE TABLE `members` (
    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    `name`    TEXT NOT NULL,
    `mail`    TEXT
);
CREATE TABLE `members` (     `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,     `name`    TEXT NOT NULL,     `mail`    TEXT );
CREATE TABLE `members` (
    `id`    INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `name`    TEXT NOT NULL,
    `mail`    TEXT
);
CREATE TABLE `members` (     `id`    INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,     `name`    TEXT NOT NULL,     `mail`    TEXT );
CREATE TABLE `messages` (
    `id`    INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `members_id`    INTEGER NOT NULL,
    `title`    TEXT NOT NULL,
    `comment`    TEXT
);
CREATE TABLE `messages` (     `id`    INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,     `members_id`    INTEGER NOT NULL,     `title`    TEXT NOT NULL,     `comment`    TEXT );
show tables;
desc members
;
insert into members (nama,松本)(mail,e15006@std.it-colllege.ac.jp);
insert into members values(0 '松本','e15006@std.it-colllege.ac.jp');
insert into members values(0,'松本','e15006@std.it-colllege.ac.jp');
desc messages;
insert into messages values(0,1,'test','testです。');
select * from messages;
select * from members;
select * from messages;
use ppdb 
CREATE TABLE `Samples` (
    `id`    INTEGER PRIMARY KEY AUTO_INCREMENT,
   `data1`    INTEGER NOT NULL,
    `data2`    REAL,
    `data3`    TEXT
);
CREATE TABLE `Samples` (     `id`    INTEGER PRIMARY KEY AUTO_INCREMENT,    `data1`    INTEGER NOT NULL,     `data2`    REAL,     `data3`    TEXT );
desc samples;
desc tables;
desc Samples;
CREATE TABLE `samples` (     `id`    INTEGER PRIMARY KEY AUTO_INCREMENT,    `data1`    INTEGER NOT NULL,     `data2`    REAL,     `data3`    TEXT );
desc samples;
use ppdb 
drop table Samples; 
show tables;
show databases;
show table;
show tables;
disc tunes
;
show databases;
use ppdb ;
select * from users; 
